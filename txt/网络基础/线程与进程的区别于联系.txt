进程，系统中正在运行的一段程序，它是资源分配的最小单元。


线程是进程的一部分，单个进程中执行的每个任务就是一个线程。它是系统调度的最小单元。


多进程，就是系统中同一时间执行多个代码段。
多线程，就是程序中同一时间处理多个任务。


二者的联系：
	1. 一个进程至少含有一个线程，一个线程只能包含在一个进程中。
	2. 进程有独立的地址空间，线程没有而是共享所属进程的地址空间，是一个进程中不同的执行路径；故一个进程奔溃不会对其他进程有影响，而一个线程奔溃就等于整个进程死掉。进程安全性更高。
	3. 进程有独立地址空间、堆栈空间和数据段，所以每启动一个新进程都必须分配它的地址、建数据维护代码段、堆栈段和数据段，故开销比较大；线程共享所属进程的地址空间和资源，只包含一个堆栈、一个寄存器和一个优先权，比进程更节俭，开销较小。所以启动一个线程要比进程花费空间小很多，线程间切换所需要时间也要小于进程间切换时间。	
	4. 在通信机制上，进程之间互不干扰，相互独立，进程之间通信相对复杂；线程由于共享数据段通信上比较方便。

		但线程之间共享资源存在互斥锁和信号量，即同一时间不允许两个线程占用同一资源，或该资源有允许最大并行数



多线程：多任务，并发工作方式
	优点如下：
	1. 提高应用程序的响应。对图形界面的程序尤其重要，当一个操作好事很长，整个系统都会等待这个操作，此时程序不会响应键盘、鼠标、菜单的操作，而是用多线程，将耗时操作置于一个新线程，可以避免这种情况
	2. 使cpu系统更加有效，操作系统会保证当线程数不大于cpu数目时，不同线程运行于不同cpu上，保证高效
	3. 改善程序结构。将一个复杂 进程分为多个任务的线程，独立运行，利于理解与修改。




一个程序至少有一个进程,一个进程至少有一个线程.

线程的划分尺度小于进程，使得多线程程序的并发性高。

线程是独立调度的基本单位, 进程是拥有资源的基本单位
另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。


线程在执行过程中与进程还是有区别的。
每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。
但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。


从逻辑角度来看，
多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。	