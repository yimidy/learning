http协议

超文本传输协议
请求与响应模式：
无状态的：同一客户端如果本次请求上一次数据，浏览器没有缓存，需要重新请求
无连接的：限制每次只处理一个请求；请求完成后，即服务器给客户端做出响应，客户端断开连接
应用层协议
基于TCP连接方式
传输任意数据类型，用Content-Type规定
默认端口号：80（https：443）
格式：http://host[:port][abs_path]



工作流程：

客户机与服务器建立联系

客户端向服务器发送请求

服务器给予客户端响应信息

客户端接受响应信息，断开连接




HTTP的不足：

通信使用明文，内容可能会被窃听；

不验证通信方的身份，因此有可能遭遇伪装；

无法证明报文的完整性，有可能已遭篡改

单向通信，永远都是客户端发起请求，服务器响应




输入网址后，发生了什么？

输入网址
DNS域名解析（浏览器--本地文件--上级域名）
向web服务器发起http请求
网站服务的永久重定向相应（搜索引擎对带或不带www的网页的搜索排名影响）
浏览器跟踪重定向地址
服务器处理请求
浏览器实现html页面
浏览器再次发起请求，加载页面中其余文件（css、js其他脚本）
浏览器发送异步ajax



HTTP请求的方式


GET 请求获取Request-URI所标识的资源 
POST 在Request-URI所标识的资源后附加新的数据 
HEAD 请求获取由Request-URI所标识的资源的响应消息报头 
PUT 请求服务器存储一个资源，并用Request-URI作为其标识 
DELETE 请求服务器删除Request-URI所标识的资源 
TRACE 请求服务器回送收到的请求信息，主要用于测试或诊断 
CONNECT 保留将来使用 
OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和





HTTP响应码信息
100//客户端继续发送
101//客户端重新定义协议
200 OK //客户端请求成功
201//请求成功，建立新资源，并随url返回
202//请求成功，但未处理
203//服务器成功处理请求，但返回响应元信息不再原服务器所能识别的资源上，而在第三方
204//成功处理请求，但返回实体无内容，要求更新元信息
205//成功处理请求，但返回实体无内容，要求更新文档
206//成功处理部分GET请求
300//请求资源有多条反馈，并且地址不一
301//永久重定向
302//临时移动，临时在一个url找到资源；可以被缓存
303//该资源在另一个url中也存在，在Location响应头中存着该位置信息；禁止缓存
304//发送一个带条件的GET请求且被允许，但文档内容与上次请求一致，返回304从本地读取资源
305//请求资源占用通过代理才能被访问到
307//临时重定向，与302一致
400 //客户端请求有语法错误，不能被服务器所理解 
401 //请求未经授权，浏览器请求需要携带WWW-Authenticate报头域一起再次发送 
403 //服务器收到请求，但是拒绝提供服务 
404 //请求资源不存在，eg：输入了错误的URL
405 //请求资源的方式请求不到该资源
406 //相应内容的特性和请求条件矛盾
407 //需要代理服务器验证用户信息
408 //请求超时
409 //被请求资源与其当前状态相冲突
410 //请求资源在服务器上已失效 
500 Internal Server Error //服务器发生不可预期的错误 
503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常






HTTP的头部信息

1）通用头信息
	请求的url、请求方式、状态码、远程地址，Host域
	请求方式（method）：GET表示获取资源，POST表示新增一个资源，PUT表示更新资源,DELETE 表示删除资源等等

2）请求头信息
	接受内容类型，接受的字符集/编码方式/语言/范围、http授权证书，代理授权证书，请求内容长度，请求内容类型，请求发送时间，host，cache control,if-match,if-none-match,if-range,if-modified-since,pragma,是否长连接、告诉是何种浏览器，发送请求的url（来源）、主机、cookie、范围，Upgrade，用户信息User Agent，Vary

3）响应头信息
	允许内容编码方式/语言/长度/类型/范围、Expirse过期时间、代理服务器，Etag，Cache control，Date，Vary

4）实体头标



影响http网络请求的来两个原因：带宽和延迟
	延迟有3方面：请求阻塞（http1.0队头阻塞，连接池数量限制）
		     DNS域名解析，知道标准服务器的IP才能建立连接，利用DNS缓存节约时间
		     建立连接需要时间（TCP三次握手）


HTTP1.0、HTTP1.1与http2.0的区别

	http1.0
		无状态：这次请求与上次请求访问同一个信息，但彼此之间无联系
		无连接：每次请求都要建立连接，即短连接；想要长连接手动设置Connection:keep-alive
		队头阻塞：要求下一次请求的发送必须在上一次请求响应后
		Host域：默认每台服务器只能绑定唯一的IP地址，故没有host头域
		缓存处理：主要使用Expires和last-Modified

	http1.1
		长连接：建立一次tcp连接，可以发送多次请求，默认Connection:keep-alive；可以减少建立连接和关闭连接的时间延迟和带宽消耗
		管道化（流水线）：这里需要注意，http1.1的长连接尽管可以同时处理多个请求，但服务器返回内容响应还是按浏览器请求内容的顺序返回的，即先发送html页面请求，在发送css文件加载，同时加载资源，尽管css文件先加载完，但也只能等到html响应后才能返回；故它没有实现真正的并行处理。想要实现并行处理，可同时开启几个tcp连接
		Host域：随着虚拟技术的发展，一台服务器可以连接多台虚拟主机，共享一个IP地址，故http1.1增加了Host域存放主机地址
		缓存处理：增加了cache control和Etag
		断点续传（节约带宽）：http1.0中存在浪费带宽现象，客户端只需要某对象的一部分，而服务器将整个对象传过来；http1.1增加了range头域，它只允许请求资源的某部分，返回206响应码（浏览器告诉服务器从哪里开始）

	        继续发送通知（节约带宽）：HTTP1.1新加了100状态码，先发送一个只带头域的请求，看服务器是否接受请求，若接受，则返回100，在发送request body；若拒绝，则返回401。可以减少资源，带宽的浪费
		错误通知管理：409状态码，表示请求资源与当前资源的状态发生冲突；410表示资源永久性删除

	
	http2.0
		二进制格式：之前都用文本，样式多样，格式解析有一定缺陷；二进制只有0、1
		多路复用（连接共享）：一个连接可以有多个请求，每个请求都有一个id，一个连接里的请求随机混杂在一起，接收方可以根据这个id将请求归属到各自不同的服务器端请求里；做到了真正的并行处理。（请求的优先级）
		数据压缩：HPACK算法（encoder）对header的数据进行压缩；通讯双方都各自cache一份header fields表，避免重复header传输，减小传输的大小
		服务器推送：服务器主动推送浏览器应该需要的内容并缓存到本地，避免多次请求



SPDY（二进制分帧？）
	在应用层与tcp传输层之间添加的一个协议，优化了http1.x以下几个方面：
		1. 多路复用
		2. 请求优先级
		3. 数据（header）压缩
		4. 服务器推送
		5. 基于https加密传输
	它与http2.0很像，http2.0是它的升级版，故http2.0出来后它见见被淘汰。



https
	安全套接字层超文本传输协议，http+ssl（tls）
	
	http不安全之处：
		窃听、篡改、冒充
	
	应用：
		http2.0基于https
		很火的微信小程序
		银行等有隐私信息的网站
	好处：
		基于https的比基于http的相同网站排名会高
		数据加密，保证数据传输的安全，不被修改和完整性
		验证网站是否真实
		校验机制，一但被篡改，通信双方会立即发现

	原理：
		基于ssl安全协议，通过证书验证确保安全；利用对称加密加非对称，哈希，数字签名
		对称加密：DES
		非对称加密：RSA
		哈希：将任意长度的信息转化为较短的固定长度的值，MD5
		数字签名：将一段文本通过哈希和私钥加密处理后生成数组签名
	流程：
		浏览器向服务器发送请求
		服务器返回信息，并携带安全证书
		浏览器验证安全证书，证明网站是否真实
		浏览器生成对称加密密钥，将要请求内容和对称加密密钥一起用服务器的公钥发送
		服务器接收到信息，用自己的私钥解开，将返回的内容用对称密钥发回给客户端
		
		  解答：安全证书里包含：
				证书的发布机构CA
				证书的有效期
				证书的所有者
				公钥
				签名
			如何证明证书正确？
				1）浏览器读取证书里面的著述所有者信息和有效期进行一一验证
				2）成功，开始查找操作心跳内置的受信任的证书发布机构CA，与服务器发来的CA进行对比，用于校验证书是否合法
				3）成功，浏览器会取来操作系统中证书颁发者CA的公钥，解密服务器发来的签名
				4）浏览器使用相同的hash算法算出服务器发来证书经hash后的值，将该值与证书签名做对比
				5）一致则真实
			为什么要发证书给客户端？
				太多浏览器访问统一服务器，客户端无法内置所有证书。
			为什么要验证证书？
				防止黑客（中间人）篡改证书信息
			为什么内容传输不用非对称加密？
				性能
			https能保证正常连接吗？
				不，中间人可能直接丢弃双方数据包


	缺点：
		1. https建立连接增加了多次握手，加密解密流程，降低访问速度
		2. ssl证书免费的很少，部署需要额外的花费
		3. 涉及安全算法会增加CPU消耗
		4. ssl证书通常需要绑定IP，不能再同一个IP上绑定多个域名

	

http与https的区别？
	1. http是明文传输，不安全协议；https是基于ssl的安全传输协议
	2. 使用完全不同的链接方式，使用的端口号也不同，80/443
	3. http连接简单，是无状态的；https是需要加密处理，身份认证的网络协议
		
		
		
	












