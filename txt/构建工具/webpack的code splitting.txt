code splitting指什么
	我们打包时通常会生成一个大的bundle.js文件，这样所有的模块都会打包到这个bundle.js文件中，最终生成的文件往往比较大。code splitting就是指将文件分割为块(chunk)，webpack使我们可以定义一些分割点(split point)，根据这些分割点对文件进行分块，并实现按需加载。
	意义：
		第三方类库单独打包。由于第三方类库的内容基本不会改变，可以将其与业务代码分离出来，这样就可以将类库代码缓存在客户端，减少请求。
		按需加载。webpack支持定义分割点，通过require.ensure进行按需加载。
		通用模块单独打包。我们代码中可能会有一些通用模块，比如弹窗、分页、通用的方法等等。其他业务代码模块常常会有引用这些通用模块。若按照2	     中做，则会造成通用模块重复打包。这时可以将通用模块单独打包出来。
	
	打包第三方类库
		//在entry中添加入口
		entry: {
    			index: './index',
    			vendor: ['jquery', 'bootstrap']
		},

		//在plugins中配置
		plugins: [
    			new webpack.optimize.CommonsChunkPlugin("vendor", "vendor.bundle.js"),
		]
		
		CommonsChunkPlugin提供两个参数，第一个参数为对应的chunk名（chunk指文件块，对应entry中的属性名），第二个参数为生成的文件名。
		这个插件做了两件事：

			将vendor配置的模块（jquery,bootstrap）打包到vendor.bundle.js中。
			将index中存在的jquery, bootstrap模块从文件中移除。这样index中则只留下纯净的业务代码。
	
	按需加载
		//在router.js中配置实现按需加载
		var Router = Backbone.Router.extend({
    			routes: {
        			'a': 'a',
        			'b': 'b'
    			},
    
   			 a: function() {
        			require.ensure(['./a'], (require) => {
            			let a = require('./a');
            			//do something
        			})
    			},
    
    			b: function() {
        			require.ensure(['./b'], (require) => {
            			let b = require('./b');
            			//do something
        			})
    			}
		})
		只有在访问a时，a.js才会被加载
		
		缺点：
			1. 若路由分配不合理，会打包出很多很小的文件，每个文件或许只有几k，却多了很多网络请求，得不偿失。
			解决：
				//在plugins中添加该插件：
				plugins: [
    					new webpack.optimize.AggressiveMergingPlugin()
				]

			2. 会造成通用模块的重复打包，比如a模块和b模块都引用了c模块，这样我们会发现打包出的a.js和b.js中都包含c模块的代码，造成了代码			冗余。

	通用模块打包
		//在entry中添加入口
		entry: {
    			index: './index',
    			common: ['./c', './d'],  //其中c,d模块为通用功能模块
    			vendor: ['jquery', 'bootstrap']
		},

		//在plugin中
		plugins: [
    			new webpack.optimize.CommonsChunkPlugin(["common", "vendor"], "[name].js")  //[name]对应'common'和'vendor'
		]
		但是这种方式在项目依赖复杂情况下的效果还是不太理想，无法做到某段代码只加载一次		


