gulp详细入门

简介：
	gulp是前端开发过程中进行自动化构建项目的利器；对网站资源进行优化，自动完成大量重复操作。
	
	它是基于Nodejs的自动任务运行器，自动完成jacascript、styl、sass、less、css、html、image等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听在文件改动后重复指定的步骤。

	它的实现是借鉴Unix操作系统的管道（pipe）思想，前一级输出为后一级输入。




使用gulp的步骤：

	安装Nodejs---->全局安装gulp---->新建package.json文件---->项目安装gulp以及gulp插件---->配置gulpfile.js---->运行文件

	1. 安装Nodejs
		npm的介绍
			npm是在安装nodejs时一起安装的nodejs的包管理器，用于node插件管理（安装、卸载、管理依赖等）
		npm的使用
			安装插件 ：npm install <name> -g --save-dev
				<name> 插件名字，如gulp-less
				-g     全局安装
				--save 将保持配置信息至package.json(nodejs项目配置文件)
				-dev   保持至package.json的devDependencies节点，不指定-dev将保持至dependencies节点
	
				问题：为什么要将插件配置信息保存到package.json里？
				因为node插件包相对来说十分庞大，所以不加入版本管理，将配置信息写入package.json并加入版本管理，其他开发者对应下载即可（npm install 下载所有包，npm install --production只下载dependencies节点里的包）
			卸载插件： npm uninstall <name> -g --save-dev
				删除全部插件 npm uninstall gulp-less gulp-sass ...
					或直接 npm install rimraf -g
			更新插件： npm update <name> -g --save-dev
				更新全部插件 npm update --save-dev
			查看当前目录已安装插件： npm list
			查看帮助： npm help
		npm的不足
			因为npm安装插件的过程是从http://registry.npmjs.org下载对应的插件包（该网站在国外，下载缓慢或异常），一般使用淘宝镜像cnpm安装
			安装： npm install cnpm -g --registry=https://registry.npm.taobao.org(注意，安装完后最好查看版本号或重启命令，要不然可能会出错)
			用法： 与npm相同，将npm换位cnpm即可

	2.全局安装gulp
		安装
			cnpm install gulp -g
	3. 配置package.json文件
		新建package.json配置文件
		可以手动创建，也可以使用命令行 cnpm init快速创建

		（注意：json文件是不可以写注释的）
		{
  			"name": "test",   //项目名称（必须）
  			"version": "1.0.0",   //项目版本（必须）
 			"description": "This is for study gulp project !",   //项目描述（必须）
  			"homepage": "",   //项目主页
  			"repository": {    //项目资源库
    				"type": "git",
    				"url": "https://git.oschina.net/xxxx"
  			},
  			"author": {    //项目作者信息
   				"name": "surging",
    				"email": "surging2@qq.com"
  			},
  			"license": "ISC",    //项目许可协议
 			 "devDependencies": {    //项目依赖的插件
   				"gulp": "^3.8.11",
   				"gulp-less": "^3.0.0"
 			 }
		}
	
	4. 本地安装gulp及其相关插件
		安装
			gulp:  cnpm install gulp --save-dev
			插件： cnpm install gulp-less --save-dev
				安装在node_modules的gulp-less目录下
			全局安装gulp是为了执行gulp任务，本地安装gulp是为了调用gulp插件

			常用插件有：
				gulp-ruby-sass

	5. 配置gulpfile.js文件（gulp项目的配置文件）
	{
		//导入包工具
		var gulp = require("gulp"),
		    less = require("gulp-less");

		//定义任务(自定义)
		gulp.task("testless",function(){
			gulp.src("src/less.index.less")
			    .pipe(less())
			    .pipe(gulp.dest("src/css"));
		})
	        //（默认）
		gulp.task('default',['testLess', 'elseTask']); //定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务
	}

	解析：

		gulp.src()//需要处理的源文件路径
			src/*.js
			src/**/*.js
			src/{a,b}.js
			!src/a.js
		gulp.dest()//处理完成后输出文件路径
		gulp.task(name,["task_other"],callback)
			gulp.tack(task_pther,function(){
				return gulp.src()
					   .pipe()
					   .pipe(gulp.dest());
			})
		gulp.watch(path,["task_other"],fn)
			path,监听的源文件，必选
			task_other，执行任务，可选（二必选其一）
			fn，执行操作，可选（二必选其一）

	6. 运行gulp
		gulp textless                    //运行指定任务
		gulp或gulp default               //运行default里的所有任务
		使用webstrom运行gulp任务         //将项目导入webstorm，右键gulpfile.js 选择”Show Gulp Tasks”打开Gulp窗口，若出现”No task found”，选择右键”Reload tasks”，双击运行即可




基于gulp前端静态站点结构：
	gulp处理静态资源文件（转化、合并、压缩），通常是将处理好的文件生成到一个新的文件夹
	
	实现静态资源与编译好的程序分离，有利用改写代码（编写代码时肯定不希望看到压缩好的代码吧）

	有些源码不想发布到网站上，如scss、less等，可以不用发布



插件的应用

gulp-less举例

	安装 cnpm install gulp-less --save-dev
	配置文件
		1.基本使用
		var gulp = require('gulp'),
    	            less = require('gulp-less');
 
		gulp.task('testLess', function () {
	    		gulp.src('src/less/index.less')
        		    .pipe(less())
       			    .pipe(gulp.dest('src/css'));
		});
		2. 编译多个less文件
		gulp.src(['src/less/index1.less','src/less/index2.less'])
		3. 调用多模块（编译less后压缩css）
		var gulp = require('gulp'),
    		    less = require('gulp-less'),
     			//确保本地已安装gulp-minify-css [cnpm install gulp-minify-css --save-dev]
    		    cssmin = require('gulp-minify-css');
 
		gulp.task('testLess', function () {
    			gulp.src('src/less/index.less')
        		    .pipe(less())
        		    .pipe(cssmin()) //兼容IE7及以下需设置compatibility属性 .pipe(cssmin({compatibility: 'ie7'}))
        		    .pipe(gulp.dest('src/css'));
		4. 当less有各种引入关系时，编译后不容易找到对应less文件，所以需要生成sourcemap文件，方便修改
		 sourcemaps = require('gulp-sourcemaps');

		.pipe(sourcemaps.init())
        	.pipe(less())
        	.pipe(sourcemaps.write())
        	.pipe(gulp.dest('src/css'));
		5. 执行 gulp testLess
		6. 监听（每修改一次，，自动执行编译任务）
		gulp.task("testWatch",function(){
			gulp.watch("src/**/*.less",["textLess"]);
		}）
		gulp testWatch
		7. 当编译出现异常时会终止watch事件，这不是我们想要的结果，所以要处理使出现异常不终止watch事件并返回错误

		//当发生异常时提示错误 确保本地安装gulp-notify和gulp-plumber
    		notify = require('gulp-notify'),
    		plumber = require('gulp-plumber');

		gulp.src('src/less/*.less')
        	    .pipe(plumber({errorHandler: notify.onError('Error: <%= error.message %>')}))



gulp-livereload举例
	
	安装  cnpm install gulp-livereload --save-dev
	使用
		1. 配置文件
		livereload = require('gulp-livereload');

		gulp.task('less', function() {
    			gulp.src('src/less/*.less')
        		    .pipe(less())
        		    .pipe(gulp.dest('src/css'))
        		    .pipe(livereload());
		});

		gulp.task('watch', function() {
    			livereload.listen();
   			gulp.watch('src/less/**/*.less', ['less']);
		});	
		2. 谷歌浏览器或火狐安装livereload插件
		3. 执行 gulp watch并开启浏览器插件
				
			