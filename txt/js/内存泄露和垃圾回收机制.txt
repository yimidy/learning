内存泄露：内存中存在大量不能访问的值，并且不能及时清除掉

引起内存泄露的原因：
	1. 闭包
	2. DOM节点的使用
	3. 定时器中有变量的引用
		变量删除了，但定时器中还有（定时器中的活动对象this指向window）对变量的引用
	4. 子节点的引用
		获取字节点时$("ul li")引用了父节点；删除父节点时如果子节点不删除，父节点也不会删除
	5. 有问题的全局变量

解决办法：
	收到删除，或使用WeakSet和WeakMap使用弱引用（对对象而言）






垃圾回收机制（GC）：周期性的清除内存中不在使用的值

方法：
	1. 标记清除：是当变量进入环境时，将这个变量标记为“进入环境”。当变量离开环境时，则将其标记为“离开环境”。标记“离开环境”的就回收内存。
		1）进入程序，给环境中所有变量标记
		2）将有权访问的变量都取消标记
		3）剩下的都是没权访问的变量，即不使用了
		4）垃圾回收机制运行，回收
	2. 引用计数
		1）值被赋值给一个变量，给该值引用计数为1
		2）值再次被赋值给另一个变量，给该值引用计数加1，为2
		3）其中一个变量被重新赋值，给该值引用计数减1，为1
		4）直到计数为0，就可以清除掉了

		这里有一个问题，就是循环引用，两对象的引用计数都是2

合理的方案：
	遍历所有的内存变量，清除掉不可用的变量

缺点：
	运行垃圾回收机制时，会停止其他的操作，这是为了安全考虑。一般js都在100ms以上，对于普通的页面请求，这是可以的；但是如果对动画（尤其是游戏中），可能会造成页面卡顿

优化：
	1）分代回收：将变量分为临时变量和持久变量，（全局变量为持久变量、函数环境中变量为临时变量）；多回收临时变量，少回收持久变量
	2）增量GC：每次回收一部分，下次接着回收；这样会减少回收时间，但会增加多次请求中断


其他浏览器机制：
	IE6使用的不是周期性运行，而是根据分配量，浏览器规定有变量256个，4096个对象，64k字符，当内存中达到一定存储时就开始运行，回收不能访问的变量
	IE7，因为IE6中如果让存储的变量过多，就会使页面卡顿，动态而定限定值。





上面多讲到对对象的存储，而对于基础类型的变量呢？

	基础类型：number，string，boolean，undefined，null

	基础类型的值会被保存到栈内存中。
		一个值到另一个值的复制，复制了一个值的副本。

	引用类型（对象）的值会被保存到堆内存中。
		包含引用类型值的变量其实并不是对象本身，而是一个指向对象的指针。一个对象到另一个对象的复制，复制的其实是指针变量，而不是对象本身。
		js不允许直接访问内存中的位置，也就是不能直接访问操作对象的空间。在操作时，实际操作的是对象的引用而不是实际的对象。



栈和堆	
	栈，由操作系统分配释放，存储函数的参数，局部变量；一级缓存，被调用时处于存储空间，使用完立即释放

	堆，由程序员操作分配释放；二级缓存，生命周期由垃圾回收机制的算法求得


	