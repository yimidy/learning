session是服务端技术，在服务端记录客户状态的机制。

客户端访问服务器时，服务器把客户端的信息以某种形式记录在服务器上，这就是session。客户端再次访问服务器只需要从服务端找到相应session就行。

session机制：
	    客户端向服务器发送请求时，服务器会检查这个请求里是否包含了一个session的标识（session id），若有，查找对应session返回，若没有，首先创建		session，在服务器端程序运行的时候创建（在java中通过调用HttpServletRequest的getSession（true）创建）在创建session的同时，服务器会为该        session生成唯一的Session Id；session创建后，可以调用session相关的方法向里面添加内容，而这些内容只会保存在服务器中。
	    服务器响应客户端请求，若找到session则返回相应页面；若没有，则传回给客户端一个session id的cookie
	    当客户端再次向服务器发送请求时，就携带有session id的cookie，服务器搜到请求时会依据session id找到相应session，给客户端返回相应响应。 

当多个客户端执行程序时，服务器会保存多个客户端的Session。获取Session的时候也不需要声明获取谁的Session。Session机制决定了当前客户只会获取到自己的Session，而不会获取到别人的Session。各客户的Session也彼此独立，互不可见。

session的生命周期：
	session在用户第一次访问服务器时生成，之后，只要用户继续访问，服务器就会更新session访问的最后时间，如果这个时间没有超过超时时间，session就一直有效

session的使用：
	session的正常运行需要客户端的支持，因为session需要cookie作为标识。
	http协议是无状态的，session不能够根据http连接判断是否为同一用户，因此服务器向客户端发送一个名为JSESSIONID的cookie，它的值是session id。该cookie是浏览器自动生成的，他的max-age为-1，表示仅当前有效。
	若cookie禁用，则采用URL地址重写，就是讲该用户session id信息冲写道url中，服务器解析到url中的session id。
	1. <a href="index.jsp;jsessionid=0CCD096E7F8D97B0BE608AFDC3E1931E?c=1&wd=Java">Homepage</a>
	2. <a href="<%=response.encodeURL("index.jsp?c=1&wd=Java") %>"> 
    Homepage</a>
	3. 表单隐藏字段（添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器）
	   <form name="testform" action="/xxx">
    		<input type="hidden" name="jsessionid" value="ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764">
    		<input type="text">
	   </form>

session缺点
	（1）session保存的东西越多，就越占服务器内存，对于用户在线人数较多的网站，服务器的压力会比较大
	（2）依赖cookie（SESSIONID保存在cookie中），若cookie禁用，则要重写url，不安全
	（3）创建session变量有很大的 随意性，可随时调用，不需要开发者做精确的处理，所以，过渡使用session变量将会导致代码不好维护与可读性差

误解：只要关闭浏览器，session就消失了。
	  造成这样的原因是现在豆浆session id存储在cookie中，关闭浏览器，cookie就消失了（会话cookie），所以下次打开浏览器访问该网页时没有了上次的信      息	，人们以为session也就消失了，但其实不是。若是就cookie存成持久cookie，即保存在硬盘中，这样下次打开浏览器访问该网页用户信息是存在的。