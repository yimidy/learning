浏览器加载页面原理

	文档初次加载时，浏览器引擎会解析html文档，生成DOM树；解析css文件，css+DOM树生成渲染树；绘制渲染树，计算其中每个节点的大小和位置，还有其他节点样式呈现页面。

	浏览器是流布局，对渲染树的计算只需要遍历一次就好了，但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中的节点属性，通常要花3倍于同等元素的时间。


重排：元素的位置和几何结构等发生改变引起文档流中布局出现偏差，需要重新排布时触发。

重绘：不改变布局，只是元素的如background、color、outline等属性需要改变时，重新绘制。

	重排一定重绘；重绘不一定重排。
	重排和重绘需要浏览器付出高昂的性能代价，耗时加载。


触发重排的操作：

首次渲染时
元素大小改变
元素位置改变
元素内容改变
页面中增、删元素
浏览器窗口大小改变
js获取某些属性时：
	offsetWidth  offsetHeight  offsetLeft  offsetTop 
	scrollWidth  scrollHeight  scrollLeft  scrollTop
	clientWidth  clientHeight  clientLeft  clientTop
	getComputedStype()(currentStype in IE)


减少重排的发生：

1. 浏览器优化机制
		浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队	列，进行	一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。
2. 将多个需要一次性改变的属性放在一个定义好的类中，一次性添加
3. 用display:none使节点隐藏并脱离文档流，在里面修改好想要的样式，在dislpay:block；显示在文档流中，这样不会影响正常文档流中元素的布局，只需2次display重排即可
4. 用position属性的绝对和固定定位，使节点脱离文档流，在里面的重排和重绘不会影响正常文档流中的元素，用来做动画最好
5. 用js添加节点时，不要一行一行向文档中放
	5.1 构建完整的区块，用变量定义，然后一次性添加到文档中。如异步获取表格数据，渲染到页面。将得到的数据在后台构建完整的html片段，在加到文档中去
	5.2 或者，创建DocumentFragment节点，将多个DOM节点添加到DocumentFragment中，再将DocumentFragment加入document中
6. js获取位置属性的值时，最好用变量缓存起来，下次直接使用，减少重复触发，使重排减少
7. 不要使用table布局



