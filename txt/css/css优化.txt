css优化，提高性能



目的

1. 提供代码性能
	加载性能
	渲染性能

2. 提供代码的可维护性
	重用性
	修改性
	扩展性


主要做法有

1. 尽量将样式写在单独css文件里面，在head元素中引用
	可以利于后期的维护：（1）内容与样式分离，易于管理和维护
			   （2）减少页面体积
			   （3）css文件可以被缓存、重用，维护成本降低

2. 不用使用@import
	影响css的加载速度

3. 避免使用复杂的选择器，层级越少越好，最好不超过3层
	简洁的选择器不仅可以减小css的大小，提高页面的加载性能，浏览器解析也会更高效，提高开发人员的开发效率，降低维护成本。

4. 精简页面的样式文件，去掉不用的样式
	正确的处理方法是根据当前页面需要的样式去合并已用到的css文件
	合并文件有一个优点：样式文件可以被缓存，进入其他页面不用在下载。但如果是大项目，不建议合并为一个文件，因为文件太大不利。

5. 利用css继承减少代码量
	可继承的：font-size,color,font-family等文字有关属性
	不可继承的：width，position，display，float等盒子属性

6.谨慎使用高消耗样式
	高消耗样式：绘制前需要浏览器大量计算的属性
	都有哪些：float、position、box-shadow、border-radius、transperency、CSS filters（性能杀手）

7. 使用语义的命名

8. 样式书写的顺序
	位置，大小，文本，背景，其他
   
9. 其他
	属性为0时不加单位
  	小于1的浮动小数写为".2"
	标准化各种浏览器样式（带前缀）写在通用样式之前
	css雪碧图
	将css文件放在页面最上面(head标签里)
*********
	减少重排和重绘
	开启css硬件加速
*********



css方法论

什么是css方法论？
	就是一些提高css性能，可维护性的规则和方法

具体的方法论都有哪些？

	OOCSS（面向对象的css）
		将重复代码提取出来，精简代码
		尽量不要嵌套选择器，容器与内容分离，增加代码重用性


	MSACSS（可扩展和模块化css）
		SMACSS将样式分成5种类型：Base，Layout，Module，State，Theme

		1、Base
　　			基础样式表，定义了基本的样式，我们平时写CSS比如reset.css就是属于基础样式表，另外我认为清除浮动，一些动画也可以归类为基础样式。
　　		2、Layout
　　			布局样式，用于实现网页的基本布局，搭起整个网页的基本骨架。
　　		3、Module
　　			网页中不同的区域有这个不同的功能，这些功能是相对独立的，我们可以称其为模块。模块是独立的，可重用的组件，它们不依赖于布局组件，可以安	全的删除修改而不影响其他模块。
　　		4、State
　　			状态样式，通常和js一起配合使用，表示某个组件或功能不同的状态，比如菜单选中状态，按钮不可用状态等。

　　			关于状态样式，我个人觉得要分情况进行讨论：
　　				(1)不同组件的同一状态的样式是一样的，比如头部的导航菜单的选中状态样式和侧栏的菜单选中状态样式是一样的，我认为这部分				状态样式可以归类为State
　　				(2)不同组件的统一状态的样式是不一样的，即两个地方的菜单虽然都是选中状态，但是他们却又不同的选中样式，这部分样式不应				该被认为是State类型，而是应该放在其组件对应的Module中。
　　		5、Theme
　　			皮肤样式，对于可更换皮肤的站点来说，这个是很有必要的，分离了结构和皮肤，根据不同的皮肤应用不同的样式文件。
	

	BEM

　		BEM是Block，Element Modifier（修饰）的缩写。下面分别来介绍一下这三个概念：

　			1. Block：在BEM的理论中，一个网页是由block组成的，比如头部是个block，内容是block，logo也是block，一个block可能由几个子			block组成。
　			2. Element：element是block的一部分，具有某种功能，element依赖于block，比如在logo中，img是logo的一个element，在菜单中，菜			单项是菜单的一个	element
			3. Modifier：modifier是用来修饰block或者element的，它表示block或者element在外观或行为上的改变

　		我们通过BEM命名法写样式如下：

		.block{}
		.block-element{}
		.block-modifier{}
		.block-element-modifier{}

		对BEM的看法主要是由两点：
　　			(1)页面CSS模块化，每个block就是一个模块，模块间相互独立
　　			(2)多级的class命名，避免选择器的嵌套结构


总结

编写css步骤：

	1. 写代码之前
		从psd出发，分析整个页面，分成哪些模块，是否是公用的；每个模块的具体样式是怎么样的
	2. 写代码
		建议采用SMACSS，首先搭建骨架，写base样式和layout样式；再写每个moudle的具体样式，写每个模块里元素的state样式，和theme样式
	3. 优化代码
		使代码更精简，语义明确，利用加载、渲染、可读，重用与修改

