css的选择符有哪些？
---------------------------------------------------------
标签选择器---div
id选择器---#div
class选择器---.div
相邻选择器---div+p
群组选择器---div,p
子选择器---div>p
后代选择器---div p
通配选择器---*
属性选择器---div[rel='eat']
伪类选择器---div:hover
组合选择器

css的特性有哪些？
-----------------------------------------------------------
优先级，继承，层叠性





优先级：计算权重
-----------------------------------------------------------
1. 行内样式（1000）>内嵌样式>外部样式表
2. ID选择器（100）>class选择器（10）>标签选择器（1）
3. 外部的ID>内嵌的标签
4. ！important优先级最高，提升属性，权重无穷大
5. 如果不能选中该标签，只是通过继承影响的话，权重为0.

css选择器的解析 是从右向左解析的




层叠性：处理css冲突的能力
----------------------------------------------------------
选中，比权重（如果一样，就近原则，后面覆盖前面）；
没选中，就近原则，后面覆盖前面（如果一样，在比权重）




继承性
-------------------------------------------------------------
关于文字样式的属性，如color、font-、text-，可继承
关于盒子、定位、布局的属性，如width,height,padding,border,margin，不可继承




class与id的区别
------------------------------------------------------------
1. class可以重复，id是唯一的
2. 一个标签可以有多个class，用空格隔开，但id就只有一个


浏览器是怎样解析CSS选择器的？
---------------------------------------------------------------

CSS选择器的解析是从右向左解析的。若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。
而在 CSS 解析完毕后，需要将解析的结果与 DOM Tree 的内容一起进行分析建立一棵 Render Tree，最终用来进行绘图。在建立 Render Tree 时（WebKit 中的「Attachment」过程），浏览器就要为每个 DOM Tree 中的元素根据 CSS 的解析结果（Style Rules）来确定生成怎样的 Render Tree。






