css优化，提高性能



目的

1. 提供代码性能
	加载性能
	渲染性能

2. 提供代码的可维护性
	重用性
	修改性
	扩展性


主要做法有

1. 尽量将样式写在单独css文件里面，在head元素中引用
	可以利于后期的维护：（1）内容与样式分离，易于管理和维护
			   （2）减少页面体积
			   （3）css文件可以被缓存、重用，维护成本降低

2. 不用使用@import
	影响css的加载速度

3. 避免使用复杂的选择器，层级越少越好，最好不超过3层
	简洁的选择器不仅可以减小css的大小，提高页面的加载性能，浏览器解析也会更高效，提高开发人员的开发效率，降低维护成本。

4. 精简页面的样式文件，去掉不用的样式
	正确的处理方法是根据当前页面需要的样式去合并已用到的css文件
	合并文件有一个优点：样式文件可以被缓存，进入其他页面不用在下载。但如果是大项目，不建议合并为一个文件，因为文件太大不利。

5. 利用css继承减少代码量
	可继承的：font-size,color,font-family等文字有关属性
	不可继承的：width，position，display，float等盒子属性

6.谨慎使用高消耗样式
	高消耗样式：绘制前需要浏览器大量计算的属性
	都有哪些：float、position、box-shadow、border-radius、transperency、CSS filters（性能杀手）

7. 使用语义的命名

8. 样式书写的顺序
	位置，大小，文本，背景，其他
   
9. 其他
	属性为0时不加单位
  	小于1的浮动小数写为".2"
	标准化各种浏览器样式（带前缀）写在通用样式之前
	css雪碧图
	将css文件放在页面最上面(head标签里)
*********
	减少重排和重绘
	开启css硬件加速
*********
保持良好的编程习惯，避免重复的CSS，JavaScript代码，多余的HTML标签和属性
启用GZIP压缩
图片预载
避免使用CSS Expression
js、css源码压缩

1. 浏览器优化机制
		浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队	列，进行	一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。
2. 将多个需要一次性改变的属性放在一个定义好的类中，一次性添加
3. 用display:none使节点隐藏并脱离文档流，在里面修改好想要的样式，在dislpay:block；显示在文档流中，这样不会影响正常文档流中元素的布局，只需2次display重排即可
4. 用position属性的绝对和固定定位，使节点脱离文档流，在里面的重排和重绘不会影响正常文档流中的元素，用来做动画最好
5. 用js添加节点时，不要一行一行向文档中放
	5.1 构建完整的区块，用变量定义，然后一次性添加到文档中。如异步获取表格数据，渲染到页面。将得到的数据在后台构建完整的html片段，在加到文档中去
	5.2 或者，创建DocumentFragment节点，将多个DOM节点添加到DocumentFragment中，再将DocumentFragment加入document中
6. js获取位置属性的值时，最好用变量缓存起来，下次直接使用，减少重复触发，使重排减少
7. 不要使用table布局



答: 

文件合并（同上题“假若你有5个不同的 CSS 文件, 加载进页面的最好方式是？”）

减少调用其他页面、文件的数量。一般我们为了让页面生动活泼会大量使用background来加载背景图，而每个 background的图像都会产生1次HTTP请求，要改善这个状况，可以采用css的1个有用的background-position属 性来加载背景图，我们将需要频繁加载的多个图片合成为1个单独的图片，需要加载时可以采用：background:url(....) no-repeat x-offset y-offset;的形式加载即可将这部分图片加载的HTTP请求缩减为1个。
每个http请求都会产生一次从你的浏览器到服务器端网络往返过程，并且导致推迟到达服务器端和返回浏览器端的时间，我们称之为延迟。


文件最小化/文件压缩

即将需要传输的内容压缩后传输到客户端再解压，这样在网络上传输的 数据量就会大幅减小。通常在服务器上的Apache、Nginx可以直接开启这个设置，也可以从代码角度直接设置传输文件头，增加gzip的设置，也可以 从 负载均衡设备直接设置。不过需要留意的是，这个设置会略微增加服务器的负担。建议服务器性能不是很好的网站，要慎重考虑。
js和css文件在百度上搜一个压缩网站就能压缩，但是在实际开发的项目中，使用gulp、webpack等工具可以打包出合并压缩后的文件，小图片可以在打包时转换成base64方式引入，大图片可以被压缩，html文件也是可以被压缩的


使用 CDN 托管

CDN的全称是Content Delivery Network，即内容分发网络。其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。


缓存的使用

Ajax调用都采用缓存调用方式，一般采用附加特征参数方式实现，注意其中的<script src=”xxx.js?{VERHASH}”，{VERHASH}就是特征参数，这个参数不变化就使用缓存文件，如果发生变化则重新下载新文件或更新信息。


css文件放置在head，js放置在文档尾

在服务器端配置control-cache  last-modify-date
在服务器配置Entity-Tag     if-none-match

用更少的时间下载更多的文件，提高网站加载速度，提高用户体验，可以使用以下方法：

1.css sprites----将小图片合并为一张大图片，使用background-position等css属性取得图片位置
2.将资源放在多个域名下-----打开控制台，可以看到很多网站都是这么做的~
3.图片延迟加载-----很多电商网站、新闻网站，尤其是用到瀑布流展示图片的时候，很多都这么做了，这个技术已经很普遍~


书写代码的时候要注意优化： 

1.css
将可以合并的样式合并起来，比如margin-top、margin-bottom等。
给img图片设置宽高，因为浏览器渲染元素的时候没有找到这两个参数，需要一边下载图片一边计算大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了。
2.js
少改变DOM元素，少触发reflow，可以复用的代码提出来写成公共的等等……
3.img
优化图片，不失真的情况下尽量减少图片大小，使用iconfont等





总结

编写css步骤：

	1. 写代码之前
		从psd出发，分析整个页面，分成哪些模块，是否是公用的；每个模块的具体样式是怎么样的
	2. 写代码
		建议采用SMACSS，首先搭建骨架，写base样式和layout样式；再写每个moudle的具体样式，写每个模块里元素的state样式，和theme样式
	3. 优化代码
		使代码更精简，语义明确，利用加载、渲染、可读，重用与修改

